// Generated by CoffeeScript 1.6.3
var Block, Dirt, Level, Player, game, gfx, keys, levels, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

levels = [
  {
    name: "Down Under",
    data: ".......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\n.......................................................................................\nOOOO.OOOOOOO...OOOOOOOOO..OOOOO.........OOOOOOOOOOOOOOO..OOO...OOOOOO..OOOOOOOOOOO..OOO\n......................................................................................."
  }
];

Level = (function() {
  Level.prototype.w = 0;

  Level.prototype.h = 0;

  Level.prototype.progress = 0;

  function Level(level, game) {
    this.game = game;
    this.load(level);
  }

  Level.prototype.load = function(level) {
    var asciiMap, col, row, x, y;
    asciiMap = (function() {
      var _i, _len, _ref, _results;
      _ref = level.data.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        _results.push(row.split(""));
      }
      return _results;
    })();
    this.map = (function() {
      var _i, _len, _results;
      _results = [];
      for (y = _i = 0, _len = asciiMap.length; _i < _len; y = ++_i) {
        row = asciiMap[y];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
            col = row[x];
            switch (col) {
              case "O":
                _results1.push(new Dirt());
                break;
              default:
                _results1.push(new Block());
            }
          }
          return _results1;
        })());
      }
      return _results;
    })();
    this.h = this.map.length;
    return this.w = this.map[0].length;
  };

  Level.prototype.update = function() {
    return this.progress--;
  };

  Level.prototype.render = function() {
    var block, c, row, x, y, _i, _j, _len, _len1, _ref;
    _ref = this.map;
    for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
      row = _ref[y];
      for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
        block = row[x];
        block.render(gfx, x * gfx.tileW + this.progress, y * gfx.tileH);
      }
    }
    c = gfx.ctx;
    c.fillStyle = "#c21303";
    c.font = "18pt helvetica";
    return c.fillText(this.game.gravity, 700, 50);
  };

  return Level;

})();

Block = (function() {
  Block.prototype.solid = false;

  function Block() {}

  Block.prototype.update = function() {};

  Block.prototype.render = function(gfx, x, y) {};

  return Block;

})();

Dirt = (function(_super) {
  __extends(Dirt, _super);

  function Dirt() {
    _ref = Dirt.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Dirt.prototype.solid = true;

  Dirt.prototype.color = "#59a219";

  Dirt.prototype.render = function(gfx, x, y) {
    return gfx.drawTile(this.color, x, y);
  };

  return Dirt;

})(Block);

Player = (function() {
  Player.prototype.x = 0;

  Player.prototype.y = 0;

  Player.prototype.w = 18;

  Player.prototype.h = 24;

  Player.prototype.speed = -10;

  function Player(level, x, y) {
    this.level = level;
    this.x = x;
    this.y = y;
    this.falling = true;
    this.onGround = false;
  }

  Player.prototype.move = function(xo, yo) {
    if ((this.y >= gfx.h - this.h) && !this.onGround) {
      this.falling = false;
      this.onGround = true;
      this.land();
    }
    if (this.falling) {
      this.onGround = false;
      this.speed += game.gravity;
      yo += this.speed;
    }
    this.x += xo;
    return this.y += yo;
  };

  Player.prototype.land = function() {
    var _this = this;
    return setTimeout((function() {
      return _this.jump();
    }), 100);
  };

  Player.prototype.jump = function() {
    this.falling = true;
    return this.speed = -20;
  };

  Player.prototype.update = function() {
    var xo, yo;
    xo = yo = 0;
    return this.move(xo, yo);
  };

  Player.prototype.render = function() {
    gfx.ctx.fillStyle = "#a26a2d";
    return gfx.ctx.fillRect(this.x, this.y, this.w, this.h);
  };

  return Player;

})();

keys = {
  up: false,
  down: false,
  space: false,
  reset: function() {
    return this.up = this.down = this.space = false;
  },
  trigger: function(keyCode, isDown) {
    switch (keyCode) {
      case 38:
        this.up = isDown;
        break;
      case 40:
        this.down = isDown;
        break;
      case 32:
        this.space = isDown;
    }
    if (this.up) {
      game.gravity = 0.01;
    }
    if (this.down) {
      game.gravity = 1.5;
    }
    if (this.space) {
      return game.gravity = 0.5;
    }
  }
};

document.addEventListener("keydown", function(e) {
  return keys.trigger(e.keyCode, true);
});

document.addEventListener("keyup", function(e) {
  return keys.trigger(e.keyCode, false);
});

gfx = {
  tileW: 18,
  tileH: 18,
  init: function() {
    var canvas;
    canvas = document.getElementById("game");
    this.ctx = canvas != null ? typeof canvas.getContext === "function" ? canvas.getContext("2d") : void 0 : void 0;
    if (!this.ctx) {
      return false;
    }
    this.w = canvas.width = 800;
    this.h = canvas.height = 400;
    return true;
  },
  clear: function() {
    return this.ctx.clearRect(0, 0, this.w, this.h);
  },
  load: function(onload) {
    return onload();
  },
  drawTile: function(color, x, y, w, h) {
    if (w == null) {
      w = 1;
    }
    if (h == null) {
      h = 1;
    }
    w *= this.tileW;
    h *= this.tileH;
    gfx.ctx.fillStyle = color;
    return gfx.ctx.fillRect(x, y, w, h);
  }
};

game = {
  gravity: 0.5,
  running: false,
  init: function() {
    if (!gfx.init()) {
      alert("Sorry, no canvas");
      return;
    }
    return gfx.load(function() {
      return game.reset();
    });
  },
  reset: function() {
    this.level = new Level(levels[0], this);
    this.player = new Player(this.level, 100, 200);
    if (!this.running) {
      this.start();
      return this.tick();
    }
  },
  start: function() {
    this.running = true;
    return console.log("Starting game...");
  },
  stop: function() {
    this.running = false;
    return console.log("Stopping game");
  },
  tick: function() {
    if (!this.running) {
      return;
    }
    gfx.clear();
    this.update();
    this.render();
    return requestAnimationFrame(function() {
      return game.tick();
    });
  },
  update: function() {
    this.level.update();
    return this.player.update();
  },
  render: function() {
    this.level.render();
    return this.player.render();
  }
};
